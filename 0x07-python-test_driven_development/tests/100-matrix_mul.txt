The ``100-matrix_mul`` module
============================

Using ``matrix_mul``
---------------------

Importing function from the module:

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Test case with valid matrices:

	>>>m_a = [[1, 2, 3], [4, 5, 6]]
	>>>m_b = [[7, 8], [9, 10], [11, 12]]
	Expected output: [[58, 64], [139, 154]]


Test case with empty m_a:

	>>>m_a = []
	>>>m_b = [[1, 2], [3, 4]]
	Expected output: ValueError exception with the message "m_a can't be empty"
	
Test case with empty m_b:
	>>>m_a = [[1, 2], [3, 4]]
	>>>m_b = []
	Expected output: ValueError exception with the message "m_b can't be empty"

Test case with non-list m_a:
	>>>m_a = "matrix"
	>>>m_b = [[1, 2], [3, 4]]
	Expected output: TypeError exception with the message "m_a must be a list"

Test case with non-list m_b:
	>>>m_a = [[1, 2], [3, 4]]
	>>>m_b = "matrix"
	Expected output: TypeError exception with the message "m_b must be a list"
	
Test case with m_a containing non-integer/float elements:
	>>>m_a = [[1, 2], [3, "four"]]
	>>>m_b = [[1, 2], [3, 4]]
	Expected output: TypeError exception with the message "m_a should contain only integers or floats"

Test case with m_b containing non-integer/float elements:
	>>>m_a = [[1, 2], [3, 4]]
	>>>m_b = [[1, 2], [3, "four"]]
	Expected output: TypeError exception with the message "m_b should contain only integers or floats"

Test case with non-rectangular m_a:
	>>>m_a = [[1, 2], [3, 4, 5]]
	>>>m_b = [[1, 2], [3, 4]]
	Expected output: TypeError exception with the message "each row of m_a must be of the same size"

Test case with non-rectangular m_b:
	>>>m_a = [[1, 2], [3, 4]]
	>>>m_b = [[1, 2], [3, 4, 5]]
	Expected output: TypeError exception with the message "each row of m_b must be of the same size"

Test case with incompatible dimensions for multiplication:
	>>>m_a = [[1, 2], [3, 4]]
	>>>m_b = [[1, 2, 3], [4, 5, 6]]
	Expected output: ValueError exception with the message "m_a and m_b can't be multiplied"

Test case with valid matrices of different sizes:
	>>>m_a = [[1, 2], [3, 4]]
	>>>m_b = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
	Expected output: [[9, 12, 15], [19, 26, 33]]
